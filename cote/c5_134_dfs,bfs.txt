DFS(Depth-First_Search, 깊이 우선 탐색)
멀리 있는 노드부터 탐색하는 알고리즘
후입선출(LIFO)방식인 스택 자료구조를 이용하는 것이 정석.
파이썬에서는 2차원 리스트로 구현

Adjacency Matrix(인접 행렬 방식)
 - 노드 개수가 많을수록 메모리 불필요하게 낭비
 - 특정 두 노드의 연결 정보 확인시 속도가 빠름
Adjacency List(인접 리스트 방식)
 - 연결된 정보만을 저장하기 때문에 메모리 효율적
 - 그러나, 두 노드의 연결에 대한 정보를 얻는 속도가 느림

스택 자료구조를 이용한 DFS 동작 과정
 1) 탐색시작 노드를 스택에 삽입하고 방문 처리
 2) 스택의 최상단 노드에 방문하지 않은 인접 노드가 있으면, 
    그 인접 노드를 스택에 넣고 방문 처리를 한다.
    방문하지 않은 인접  노드가 없으면 스택에서 최상단 노드를 꺼낸다.
 3) 2)번의 과정을 더 이상 수행할 수 없을 때까지 반복한다.

BFS(Breadth First Search, 너비 우선 탐색)
가까운 노드부터 탐색하는 알고리즘
선입선출(FIFO)방식인 큐 자료구조를 이용하는 것이 정석.
파이썬에서는 deque라이브러리로 구현
(일반적인 경우 실제 수행시간은 DFS보다 좋은 편)

큐 자료구조를 이용한 BFS 동작 과정
 1) 탐색 시작 노드를 큐에 삽입하고 방문 처리를 한다.
 2) 큐에서 노드를 꺼내 해당 노드의 인접 노드 중에서
    방문하지 않은 노드를 모두 큐에 삽입하고 방문처리한다.
 3) 2)번의 과정을 더 이상 수행할 수 없을 때까지 반복한다.